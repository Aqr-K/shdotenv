#!/bin/sh

set -eu

version() { echo 0.8.0; }

usage() {
  printf '%s\n' "Usage: shdotenv [OPTION]... [--] [[COMMAND | export] [ARG]...]" "" \
    "  -d, --dialect DIALECT  Specify the .env dialect [default: posix]" \
    "                           (posix, ruby, node, python, php, go, rust, docker)" \
    "  -f, --format FORMAT    Output in the specified format [default: sh]" \
    "                           (sh, fish)" \
    "  -s, --shell SHELL      Deprecated: Use the -f option instead" \
    "  -e, --env ENV_PATH     Location of the .env file [default: .env]" \
    "                           Multiple -e options are allowed" \
    "  -o, --overload         Overload predefined environment variables" \
    "  -n, --noexport         Do not export keys without export prefix" \
    "  -g, --grep PATTERN     Output only those that match the regexp pattern" \
    "  -k, --keyonly          Output only variable names" \
    "  -q, --quiet            Suppress all output" \
    "  -v, --version          Show the version and exit" \
    "  -h, --help             Show this message and exit" \
    "" \
    "Usage: shdotenv export [-p] [--] [NAME]..." \
    "  Exports the current environment variables in posix-compliant .env format" \
    "" \
    "  -p  Append \"export\" prefix"
}

abort() { echo "shdotenv:" "$@" >&2 && exit 1; }
requires() {
  [ $# -gt 1 ] || abort "Error: $1 option requires an argument"
  _shdotenv_pos=$((_shdotenv_pos + 1))
}

parse_options() {
  while [ $# -gt 0 ]; do
    case $1 in
      -d | --dialect) requires "$@" && shift && _shdotenv_dialect="$1" ;;
      -s | --shell) # deprecated
        requires "$@" && shift && _shdotenv_format="$1"
        [ "$_shdotenv_format" = "posix" ] && _shdotenv_format="sh"
        ;;
      -f | --format) requires "$@" && shift && _shdotenv_format="$1" ;;
      -e | --env)
        requires "$@" && shift
        _shdotenv_envfiles="$_shdotenv_envfiles \"\${$_shdotenv_pos}\""
        ;;
      -o | --overload) _shdotenv_overload=1 ;;
      -n | --noexport) _shdotenv_allexport='' ;;
      -g | --grep) requires "$@" && shift && _shdotenv_grep="$1" ;;
      -k | --keyonly) _shdotenv_keyonly=1 ;;
      -q | --quiet) _shdotenv_quiet=1 ;;
      -v | --version) version && exit 0 ;;
      -h | --help) usage && exit 0 ;;
      --) _shdotenv_pos=$((_shdotenv_pos + 1)) && break ;;
      -*) abort "Unknown option: $1" ;;
      *) break ;;
    esac
    shift
    _shdotenv_pos=$((_shdotenv_pos + 1))
  done
}

trim() {
  eval "$1=\${2#\"\${2%%[!\$IFS]*}\"} && $1=\${$1%\"\${$1##*[!\$IFS]}\"}"
}

init_vars() {
  _shdotenv_dialect='' _shdotenv_format="${SHDOTENV_FORMAT:-}" _shdotenv_grep=''
  _shdotenv_envfiles='' _shdotenv_overload='' _shdotenv_allexport=1
  _shdotenv_keyonly='' _shdotenv_quiet=''
  _shdotenv_pos=1 _shdotenv_line=''
  [ "$_shdotenv_format" ] || _shdotenv_format="${SHDOTENV_SHELL:-}" # deprecated

  _shdotenv_parser=$(cat src/parser.awk)     # @INCLUDE-FILE
  _shdotenv_exporter=$(cat src/exporter.awk) # @INCLUDE-FILE
}

unset_vars() {
  unset _shdotenv_dialect _shdotenv_format _shdotenv_grep
  unset _shdotenv_envfiles _shdotenv_overload _shdotenv_allexport
  unset _shdotenv_keyonly _shdotenv_quiet
  unset _shdotenv_pos _shdotenv_line _shdotenv_parser _shdotenv_env
}

read_config_file() {
  [ -e "$1" ] || return 0
  while IFS= read -r _shdotenv_line || [ "$_shdotenv_line" ]; do
    _shdotenv_line=${_shdotenv_line%%#*}
    trim _shdotenv_line "$_shdotenv_line"
    case $_shdotenv_line in
      dialect:*) trim _shdotenv_dialect "${_shdotenv_line#*:}" ;;
      *) abort "Unknown line in $1: $_shdotenv_line" ;;
    esac
  done <"$1"
}

exec_parser() {
  eval "set -- ${_shdotenv_envfiles:-.env}"
  set -- "$_shdotenv_parser" "$@"
  [ "$_shdotenv_dialect" ] && set -- -v DIALECT="$_shdotenv_dialect" "$@"
  [ "$_shdotenv_format" ] && set -- -v FORMAT="$_shdotenv_format" "$@"
  [ "$_shdotenv_overload" ] && set -- -v OVERLOAD="$_shdotenv_overload" "$@"
  [ "$_shdotenv_allexport" ] && set -- -v ALLEXPORT="$_shdotenv_allexport" "$@"
  [ "$_shdotenv_grep" ] && set -- -v GREP="$_shdotenv_grep" "$@"
  [ "$_shdotenv_keyonly" ] && set -- -v KEYONLY="$_shdotenv_keyonly" "$@"
  "${SHDOTENV_AWK:-awk}" "$@"
}

exec_exporter() {
  set -- - "$@"

  # These variables use the values of the current shell
  #   Special environment variables in gawk
  [ "${AWKPATH+x}" ] && set -- "AWKPATH=$AWKPATH" "$@"
  [ "${AWKLIBPATH+x}" ] && set -- "AWKLIBPATH=$AWKLIBPATH" "$@"

  set -- "$_shdotenv_exporter" "$@"
  "${SHDOTENV_AWK:-awk}" "$@"
}

eval_env() {
  eval "set --; $1"
}

init_vars
parse_options "$@"

read_config_file ".shdotenv"

if [ $(($# - _shdotenv_pos + 1)) -eq 0 ] || [ "$_shdotenv_keyonly" ]; then
  [ "$_shdotenv_quiet" ] && exec >/dev/null
  exec_parser "$@"
else
  _shdotenv_format="sh"
  _shdotenv_env=$(exec_parser "$@")
  shift $((_shdotenv_pos - 1))
  set -- "$_shdotenv_env" "$@"
  unset_vars
  eval_env "$1"
  shift
  case $1 in
    export)
      shift
      exec_exporter "$@"
      ;;
    *) exec "$@" ;;
  esac
fi
