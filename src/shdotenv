#!/bin/sh

set -eu

version() { echo 0.8.0; }

usage() {
  printf '%s\n' "Usage: shdotenv [OPTION]... [--] [[COMMAND | export] [ARG]...]" \
    "" \
    "  If the COMMAND is specified, it will load .env files and run the command." \
    "  If the COMMAND is omitted, it will output the result of interpreting .env" \
    "  files. It can be safely loaded into the shell (For example, using eval)." \
    "" \
    "Options:" \
    "  -d, --dialect DIALECT     Specify the .env dialect [default: posix]" \
    "                                posix, ruby, node, python," \
    "                                php, go, rust, docker" \
    "  -f, --format FORMAT       Output in the specified format [default: sh]" \
    "                                sh, fish" \
    "  -e, --env ENV_PATH        Location of the .env file [default: .env]" \
    "                              Multiple -e options are allowed" \
    "                              If the ENV_PATH is \"-\", read from stdin" \
    "  -i, --ignore-environment  Ignore the current environment variables" \
    "      --overload            Overload predefined environment variables" \
    "      --noexport            Do not append \"export\" prefix" \
    "      --grep PATTERN        Output only names that match the regexp pattern" \
    "      --name-only           Output only environment variable names" \
    "  -q, --quiet               Suppress all output (useful for test .env files)" \
    "  -v, --version             Show the version and exit" \
    "  -h, --help                Show this message and exit" \
    "" \
    "  Deprecated: (to be removed in the next version)" \
    "  -s, --shell SHELL         Use the -f (--format) option instead" \
    "  -k, --keyonly             Use the --name-only option instead" \
    "  -o, -n, -g                Use long options instead" \
    "" \
    "Usage: shdotenv export [-n | -p] [--] [NAME]..." \
    "  Exports environment variables in posix-compliant .env format." \
    "" \
    "  -n  List only environment variable names" \
    "  -p  Append \"export\" prefix to environment variable names" \
    "" \
    "  This will be output after the .env files is loaded. If you do not want" \
    "  to load it, specify \"-e /dev/null\". This is similar to \"export\", \"env\"" \
    "  and \"printenv\" commands, but quoting correctly and exports only portable" \
    "  environment variable name that are valid as identifier for posix shell."
}

abort() { echo "shdotenv:" "$@" >&2 && exit 1; }
requires() {
  [ $# -gt 1 ] || abort "Error: $1 option requires an argument"
  _shdotenv_pos=$((_shdotenv_pos + 1))
}

parse_options() {
  while [ $# -gt 0 ]; do
    case $1 in
      -d | --dialect) requires "$@" && shift && _shdotenv_dialect="$1" ;;
      -s | --shell) # deprecated
        requires "$@" && shift && _shdotenv_format="$1"
        [ "$_shdotenv_format" = "posix" ] && _shdotenv_format="sh"
        ;;
      -f | --format) requires "$@" && shift && _shdotenv_format="$1" ;;
      -e | --env)
        requires "$@" && shift
        _shdotenv_envfiles="$_shdotenv_envfiles \"\${$_shdotenv_pos}\""
        ;;
      -i | --ignore-environment) _shdotenv_ignore=1 ;;
      -o | --overload) _shdotenv_overload=1 ;;
      -n | --noexport) _shdotenv_allexport='' ;;
      -g | --grep) requires "$@" && shift && _shdotenv_grep="$1" ;;
      -k | --keyonly | --name-only) _shdotenv_nameonly=1 ;;
      -q | --quiet) _shdotenv_quiet=1 ;;
      -v | --version) version && exit 0 ;;
      -h | --help) usage && exit 0 ;;
      --) _shdotenv_pos=$((_shdotenv_pos + 1)) && break ;;
      -*) abort "Unknown option: $1" ;;
      *) break ;;
    esac
    shift
    _shdotenv_pos=$((_shdotenv_pos + 1))
  done
}

trim() {
  eval "$1=\${2#\"\${2%%[!\$IFS]*}\"} && $1=\${$1%\"\${$1##*[!\$IFS]}\"}"
}

init_vars() {
  _shdotenv_dialect='' _shdotenv_format="${SHDOTENV_FORMAT:-}" _shdotenv_grep=''
  _shdotenv_envfiles='' _shdotenv_overload='' _shdotenv_allexport=1
  _shdotenv_nameonly='' _shdotenv_quiet='' _shdotenv_ignore=''
  _shdotenv_pos=1 _shdotenv_line=''
  [ "$_shdotenv_format" ] || _shdotenv_format="${SHDOTENV_SHELL:-}" # deprecated

  _shdotenv_parser=$(cat src/parser.awk)     # @INCLUDE-FILE
  _shdotenv_exporter=$(cat src/exporter.awk) # @INCLUDE-FILE
}

unset_vars() {
  unset _shdotenv_dialect _shdotenv_format _shdotenv_grep
  unset _shdotenv_envfiles _shdotenv_overload _shdotenv_allexport
  unset _shdotenv_nameonly _shdotenv_quiet _shdotenv_ignore
  unset _shdotenv_pos _shdotenv_line _shdotenv_parser _shdotenv_env
}

read_config_file() {
  [ -e "$1" ] || return 0
  while IFS= read -r _shdotenv_line || [ "$_shdotenv_line" ]; do
    _shdotenv_line=${_shdotenv_line%%#*}
    trim _shdotenv_line "$_shdotenv_line"
    case $_shdotenv_line in
      dialect:*) trim _shdotenv_dialect "${_shdotenv_line#*:}" ;;
      *) abort "Unknown line in $1: $_shdotenv_line" ;;
    esac
  done <"$1"
}

exec_parser() {
  eval "set -- ${_shdotenv_envfiles:-.env}"
  set -- "$_shdotenv_parser" "$@"
  [ "$_shdotenv_dialect" ] && set -- -v DIALECT="$_shdotenv_dialect" "$@"
  [ "$_shdotenv_format" ] && set -- -v FORMAT="$_shdotenv_format" "$@"
  [ "$_shdotenv_overload" ] && set -- -v OVERLOAD="$_shdotenv_overload" "$@"
  [ "$_shdotenv_allexport" ] && set -- -v ALLEXPORT="$_shdotenv_allexport" "$@"
  [ "$_shdotenv_grep" ] && set -- -v GREP="$_shdotenv_grep" "$@"
  [ "$_shdotenv_nameonly" ] && set -- -v NAMEONLY="$_shdotenv_nameonly" "$@"
  [ "$_shdotenv_ignore" ] && set -- -v IGNORE="$_shdotenv_ignore" "$@"
  "${SHDOTENV_AWK:-awk}" "$@"
}

exec_exporter() {
  set -- - "$@"

  # These variables use the values of the current shell
  #   Special environment variables in gawk
  [ "${AWKPATH+x}" ] && set -- "AWKPATH=$AWKPATH" "$@"
  [ "${AWKLIBPATH+x}" ] && set -- "AWKLIBPATH=$AWKLIBPATH" "$@"

  set -- "$_shdotenv_exporter" "$@"
  "${SHDOTENV_AWK:-awk}" "$@"
}

eval_env() {
  eval "set --; $1"
}

init_vars
parse_options "$@"

read_config_file ".shdotenv"

if [ $(($# - _shdotenv_pos + 1)) -eq 0 ] || [ "$_shdotenv_nameonly" ]; then
  [ "$_shdotenv_quiet" ] && exec >/dev/null
  exec_parser "$@"
else
  _shdotenv_format="sh"
  _shdotenv_env=$(exec_parser "$@")
  shift $((_shdotenv_pos - 1))
  set -- "$_shdotenv_env" "$@"
  unset_vars
  eval_env "$1"
  shift
  case $1 in
    export)
      shift
      exec_exporter "$@"
      ;;
    *) exec "$@" ;;
  esac
fi
